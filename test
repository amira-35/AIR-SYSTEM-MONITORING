from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, col, udf
from pyspark.sql.types import StructType, StructField, StringType, DoubleType

# Initialisez SparkSession
# Initialize SparkSession with Kafka consumer configuration
spark = SparkSession.builder \
    .appName("Calcul AQI Streaming") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.2.0") \
    .getOrCreate()


# Définissez le schéma pour les données JSON
schema = StructType([
    StructField("DateTime", StringType()),
    StructField("Latitude", StringType()),
    StructField("Longitude", StringType()),
    StructField("NO2", StringType()),
    StructField("CO", StringType()),
    StructField("PM10", StringType()),
    StructField("PM25", StringType()),
    StructField("SO2", StringType()),
    StructField("O3", StringType()),
    StructField("Direction vent", StringType()),
    StructField("Vitesse vent", StringType())
])

kafka_consumer_properties = {
    "kafka.bootstrap.servers": "localhost:9092",
    "subscribe": "TransferData",
    "kafka.consumer.poll.ms": "500"  # Adjust as needed
}

# Read streaming data from Kafka with specified consumer properties
streaming_df = spark \
    .readStream \
    .format("kafka") \
    .options(**kafka_consumer_properties) \
    .load() \
    .selectExpr("CAST(value AS STRING)")  # Assuming data is in JSON format

# Convertissez la colonne 'value' en DataFrame structuré
parsed_streaming_df = streaming_df \
    .select(from_json(col("value"), schema).alias("data")) \
    .select("data.*")

# Définissez la fonction de calcul de l'AQI en tant que fonction UDF
@udf(returnType=DoubleType())
def calculate_aqi(no2, co, pm10, pm25, so2, o3):
    return (float(no2) * 0.2) + (float(co) * 0.3) + (float(pm10) * 0.1) + \
           (float(pm25) * 0.15) + (float(so2) * 0.25) + (float(o3) * 0.15)

# Appliquez la fonction de calcul en continu pour ajouter la colonne d'AQI
streaming_df_with_aqi = parsed_streaming_df.withColumn("AQI", calculate_aqi(col("NO2"), col("CO"), col("PM10"), col("PM25"), col("SO2"), col("O3")))

# Définissez les catégories d'AQI en tant que fonction UDF
@udf(returnType=StringType())
def assign_aqi_category(aqi):
    if aqi <= 50:
        return "Bon"
    elif aqi <= 100:
        return "Modéré"
    elif aqi <= 150:
        return "Mauvais"
    else:
        return "Très Mauvais"

# Ajoutez la colonne des catégories d'AQI à votre DataFrame en continu
streaming_df_with_air_quality = streaming_df_with_aqi.withColumn("AQI Category", assign_aqi_category(col("AQI")))

# Écriture des résultats en continu dans la console
query = streaming_df_with_air_quality.writeStream \
    .outputMode("append") \
    .format("console") \
    .start()

# Attendez que la requête en continu se termine
query.awaitTermination()
