from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, col, udf
from pyspark.sql.types import StructType, StructField, StringType, DoubleType
from pyspark.sql.types import IntegerType

# Initialize SparkSession with Kafka consumer configuration
spark = SparkSession.builder \
    .appName("Calcul AQI Streaming") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.2.0") \
    .getOrCreate()

# Define the schema with appropriate data types
schema = StructType([
    StructField("DateTime", StringType()),
    StructField("Latitude", DoubleType()), 
    StructField("Longitude", DoubleType()),  
    StructField("NO2", DoubleType()),
    StructField("CO", DoubleType()),  
    StructField("PM10", DoubleType()),  
    StructField("PM25", DoubleType()),  
    StructField("SO2", DoubleType()), 
    StructField("O3", DoubleType()),  
    StructField("Direction vent", StringType()),  
    StructField("Vitesse vent", StringType())  
])

kafka_consumer_properties = {
    "kafka.bootstrap.servers": "localhost:9092",
    "subscribe": "TransferData",
    "kafka.consumer.poll.ms": "500"  # Adjust as needed
}

# Read streaming data from Kafka with specified consumer properties
streaming_df = spark \
    .readStream \
    .format("kafka") \
    .options(**kafka_consumer_properties) \
    .load() \
    .selectExpr("CAST(value AS STRING)")  # Assuming data is in JSON format

# Convertissez la colonne 'value' en DataFrame structuré
parsed_streaming_df = streaming_df \
    .select(from_json(col("value"), schema).alias("data")) \
    .select("data.*")

@udf(returnType=DoubleType())
def calculate_aqi(no2, co, pm10, pm25, so2, o3):
    tab_AQI = [
        [0, 50],
        [51, 100],
        [101, 150],
        [151, 200],
        [201, 300],
        [301, 500]
    ]
    tab_conc_o3 = [
        [0, 100],
        [101, 120],
        [121, 167],
        [168, 206],
        [207, 392]
    ]
    tab_conc_pm25 = [
        [0, 50],
        [51, 60],
        [61, 75],
        [76, 150],
        [151, 250],
        [251, 392]
    ]
    tab_conc_pm10 = [
        [0, 75],
        [76, 150],
        [151, 250],
        [251, 350],
        [351, 420],
        [421, 600]
    ]
    tab_conc_co = [
        [0, 5],
        [6, 10],
        [11, 14.3],
        [14.4, 17.8],
        [17.9, 35],
        [36, 58]
    ]
    tab_conc_so2 = [
        [0, 92],
        [93, 350],
        [351, 485],
        [486, 797]
    ]
    tab_conc_no2 = [
        [0, 100],
        [101, 400],
        [401, 677],
        [678, 1221],
        [1222, 2349],
        [2350, 3853]
    ]
    # O3
    for i, conc_range in enumerate(tab_conc_o3):
        if conc_range[0] <= o3 <= conc_range[1]:
            o3 = (tab_AQI[i][1] - tab_AQI[i][0]) / (conc_range[1] - conc_range[0]) * (o3 - conc_range[0]) + tab_AQI[i][0]
    # PM25
    for i, conc_range in enumerate(tab_conc_pm25):
        if conc_range[0] <= pm25 <= conc_range[1]:
            pm25 = (tab_AQI[i][1] - tab_AQI[i][0]) / (conc_range[1] - conc_range[0]) * (pm25 - conc_range[0]) + tab_AQI[i][0]
    # PM10
    for i, conc_range in enumerate(tab_conc_pm10):
        if conc_range[0] <= pm10 <= conc_range[1]:
            pm10 = (tab_AQI[i][1] - tab_AQI[i][0]) / (conc_range[1] - conc_range[0]) * (pm10 - conc_range[0]) + tab_AQI[i][0]
    # CO
    for i, conc_range in enumerate(tab_conc_co):
        if conc_range[0] <= co <= conc_range[1]:
            co = (tab_AQI[i][1] - tab_AQI[i][0]) / (conc_range[1] - conc_range[0]) * (co - conc_range[0]) + tab_AQI[i][0]
    # SO2
    for i, conc_range in enumerate(tab_conc_so2):
        if conc_range[0] <= so2 <= conc_range[1]:
            so2 = (tab_AQI[i][1] - tab_AQI[i][0]) / (conc_range[1] - conc_range[0]) * (so2 - conc_range[0]) + tab_AQI[i][0]
    # NO2
    for i, conc_range in enumerate(tab_conc_no2):
        if conc_range[0] <= no2 <= conc_range[1]:
            no2 = (tab_AQI[i][1] - tab_AQI[i][0]) / (conc_range[1] - conc_range[0]) * (no2 - conc_range[0]) + tab_AQI[i][0]

    return max(o3, pm25, pm10, co, so2, no2) # Convertir le résultat en float



# Appliquez la fonction de calcul en continu pour ajouter la colonne d'AQI
streaming_df_with_aqi = parsed_streaming_df.withColumn("AQI", calculate_aqi(col("NO2"), col("CO"), col("PM10"), col("PM25"), col("SO2"), col("O3")))

@udf(returnType=IntegerType())
def assign_aqi_category(aqi):
    if aqi <= 50:
        return 1
    elif aqi <= 100:
        return 2
    elif aqi <= 150:
        return 3
    elif aqi <= 200:
        return 4
    elif aqi <= 300:
        return 5
    elif aqi <= 500:
        return 6
    else:
        return 0  # Ajout d'un cas pour les valeurs d'AQI non couvertes par les conditions précédentes

# Ajoutez la colonne des catégories d'AQI à votre DataFrame en continu
streaming_df_with_air_quality = streaming_df_with_aqi.withColumn("AQI Category", assign_aqi_category(col("AQI")))


# Écriture des résultats en continu dans la console
query = streaming_df_with_air_quality.writeStream \
    .outputMode("append") \
    .format("csv") \
    .option("path", r"C:\Users\pc\Desktop\donnees_air.csv").option("checkpointLocation", r"C:\Users\pc\Desktop\donnees_air.csv").start()

# Attendez que la requête en continu se termine
query.awaitTermination()
